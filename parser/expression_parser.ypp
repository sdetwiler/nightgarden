%{

#include <stdio.h>
#include <string.h>

#include "types.h"
#include "lsystem.h"

// #define DEBUG_PARSER

int yylex(void);
void yyerror(char *s);


Variable* getExpressionReturnVariable();
Variable* getVariable(char const* name);

%}

%name-prefix="expression_"


%union {
	float     value;
	char*     identifier;
}

%token <value> INTEGER
%token <value> FLOAT

%token <identifier> IDENTIFIER

%type <value> expr
%type <value> number

%destructor { free($$); } IDENTIFIER

%left '+' '-'
%left '*' '/'

%%

calc : expr
{
	Variable* ret = getExpressionReturnVariable();
	if(ret)
	{
		ret->value = $1;
	}
}

expr : number { $$ = $1; }
| expr '*' expr { $$ = $1 * $3; }
| expr '/' expr { $$ = $1 / $3; }
| expr '+' expr { $$ = $1 + $3; }
| expr '-' expr { $$ = $1 - $3; }

number : INTEGER { $$ = $1; }
| FLOAT { $$ = $1; }
| IDENTIFIER
{
	Variable* v = getVariable($1);
	if(v)
	{
		$$ = v->value;
	}
	else
	{
		yyerror("Variable not defined");
	}
	/*if ([$1 isEqualToString:@"pi"]) $$ = M_PI; else $$ = 0.0; [$1 release];*/
}

%%
