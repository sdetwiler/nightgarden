%option prefix="rules_"
%option reentrant bison-bridge
%option noyywrap nounput noinput

%{

#include "rules_parser.tab.h"
#include "types.h"

%}

%%

#.* { return COMMENT; }



[a-zA-Z] { yylval->symbol = new Symbol(); yylval->symbol->value = yytext; return SYMBOL; }

\".+\" { yylval->str = strndup(yytext+1, strlen(yytext)-2); printf("STRING: %s\n", yylval->str); return STRING; }



"->" { return TRANSITION; }
"," { return COMMA; }
":" { return COLON; }

"<" { return LT; }
"<=" { return LTE; }
">" { return GT; }
">=" { return GTE; }
"==" { return EQ; }
"!=" { return NEQ; }

"(" { return LP; }
")" { return RP; }

"+" { return ADD; }
"-" { return SUB; }
"^" { return EXP; }

[.\[\]\*&!/\'|{}~] { yylval->symbol = new Symbol(); yylval->symbol->isOperator=true; yylval->symbol->value = yytext; return SYMBOL; }


[0-9]*\.?[0-9]* { yylval->num_float = atof(yytext); return FLOAT; }

"\n" { return NEWLINE; }

"rule" { return RULE; }
"axiom" { return AXIOM; }
"state" { return STATE; }
"var" { return VAR; }

[\t ] { }


. { return yytext[0]; };

%%
