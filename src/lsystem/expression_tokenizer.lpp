%{

#include "expression_parser.tab.h"
#include "types.h"


void expression_error(char *s);
    
%}

%option prefix="expression_"

%%


[0-9]+\.[0-9]* { expression_lval.value = atof(yytext); return FLOAT; }

[0-9]+ { expression_lval.value = atof(yytext); return INTEGER; }

[a-zA-Z]+ { expression_lval.identifier = strdup(yytext); return IDENTIFIER; }

[\n\t ] { }

"<" { return LT; }
"<=" { return LTE; }
">" { return GT; }
">=" { return GTE; }
"==" { return EQ; }


. { return yytext[0]; };

%%

int yywrap() 
{
    // This is a place where one can append more text if it would be needed, quit for now
    return 1;
}

void expression_error(char *s)
{
	printf("Expression %s: %s\n", s, yytext);
}
